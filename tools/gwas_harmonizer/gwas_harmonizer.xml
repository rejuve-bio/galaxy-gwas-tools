<tool id="gwas_harmonizer" name="GWAS Summary Stats Harmonizer" version="1.0.0" profile="22.05">
    <description>formats and harmonizes GWAS summary statistics using the EBI pipeline</description>
    <macros>
        <xml name="requirements">
            <requirements>
                <requirement type="package" version="22.10.8">nextflow</requirement>
                <requirement type="package" version="1.17.0">htslib</requirement>
            </requirements>
        </xml>
        <xml name="citations">
            <citations>
                <citation type="bibtex">@misc{gwas-sumstats-harmoniser,
                    author       = {EBISPOT},
                    title        = {gwas-sumstats-harmoniser},
                    month        = oct,
                    year         = 2020,
                    publisher    = {GitHub},
                    journal      = {GitHub repository},
                    howpublished = {\url{https://github.com/EBISPOT/gwas-sumstats-harmoniser}},
                }</citation>
            </citations>
        </xml>
        <token name="@PREPROCESS_AWK@"><!=i
                is_neale = h["variant"] && (h["beta"]||h["or"]) && (h["se"]||h["stderr"]||h["standard_error"]) && (h["pval"]||h["p"])
                is_plink = ((h["chr"]||h["chrom"]) && (h["bp"]||h["pos"]) && h["a1"] && h["a2"] && (h["beta"]||h["or"]) && (h["se"]||h["stderr"]||h["standard_error"]) && (h["p"]||h["pval"]))
                if(!is_neale &&!is_plink){ print "ERROR: unknown layout" > "/dev/stderr"; exit 2 }
                next
            }
            {
                chrom=""; pos=""; ea=""; oa=""; beta=""; se=""; p=""; eaf=""; rsid=""
                if(is_neale){
                    split($h["variant"], v, ":"); chrom=v[1]; pos=v[2]; oa=v[3]; ea=v[4]
                    if(h["beta"]) beta=$h["beta"]
                    if(h["se"]) se=$h["se"]; else if(h["stderr"]) se=$h["stderr"]; else if(h["standard_error"]) se=$h["standard_error"]
                    if(h["pval"]) p=$h["pval"]; else if(h["p"]) p=$h["p"]
                    if(h["af"]) eaf=$h["af"]; else if(h["minor_af"]) eaf=$h["minor_af"]; else if(h["effect_allele_frequency"]) eaf=$h["effect_allele_frequency"]
                    if(h["rsid"]) rsid=$h["rsid"]; else if(h["snp"]) rsid=$h["snp"]
                } else {
                    chrom = (h["chr"]? $h["chr"] : $h["chrom"])
                    pos   = (h["bp"]?  $h["bp"]  : $h["pos"])
                    ea    = $h["a1"]; oa=$h["a2"]
                    if(h["beta"]) beta=$h["beta"]
                    if(h["se"]) se=$h["se"]; else if(h["stderr"]) se=$h["stderr"]; else if(h["standard_error"]) se=$h["standard_error"]
                    p     = (h["p"]? $h["p"] : $h["pval"])
                    if(h["a1_freq"]) eaf=$h["a1_freq"]; else if(h["frq"]) eaf=$h["frq"]; else if(h["effect_allele_frequency"]) eaf=$h["effect_allele_frequency"]
                    if(h["id"]) rsid=$h["id"]; else if(h["snp"]) rsid=$h["snp"]; else if(h["rsid"]) rsid=$h["rsid"]
                }
                if(eaf=="") eaf="NA"; if(rsid=="") rsid="NA"
                print chrom, pos, toupper(ea), toupper(oa), beta, se, p, eaf, rsid
            }
        '
        ]]></token>
    </macros>
    <expand macro="requirements" />
    <command detect_errors="exit_code"><!:
            #set reader = "bgzip -dc"
        #end if

        $reader '$input_sumstats' | @PREPROCESS_AWK@ > preprocessed.tsv &&
        bgzip -f preprocessed.tsv &&

        ## Step 2: Create the metadata YAML file.
        #set build_str = "GRCh" + str($input_build)
        MD5=$$(md5sum < preprocessed.tsv.gz | awk '{print $1}') &&
        echo "genome_assembly: $build_str" > preprocessed.tsv.gz-meta.yaml &&
        echo "coordinate_system: 1-based" >> preprocessed.tsv.gz-meta.yaml &&
        echo "data_file_md5sum: ${MD5}" >> preprocessed.tsv.gz-meta.yaml &&

        ## Step 3: Detect chromosomes present in the data, similar to chromlist_from_ssf.
        CHROMLIST=$$(bgzip -dc preprocessed.tsv.gz | awk -F'\t' '
            NR==1 { for(i=1;i<=NF;i++) if($i=="chromosome") c=i; next }
            {
                chr=$c;
                sub(/^chr/,"",chr);
                if(chr=="23") chr="X";
                else if(chr=="24") chr="Y";
                else if(chr=="26") chr="MT";
                print chr
            }
        ' | awk 'NF' | sort -u | paste -sd,) &&
        
        ## If no chromosomes are detected, use a default list to prevent errors.
        if; then
            CHROMLIST="1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,X,Y,MT"
        fi &&

        ## Step 4: Run the Nextflow harmonizer pipeline.
        /mnt/hdd_1/ofgeha/gwas-sumstats-harmoniser/nextflow run /mnt/hdd_1/ofgeha/gwas-sumstats-harmoniser/main.nf
            -profile standard,docker
            --harm
            --ref '$ref_dir.fields.path'
            --file "\$PWD/preprocessed.tsv.gz"
            --chromlist "\$CHROMLIST"
            --to_build '$target_build'
            --threshold '$threshold'
            -resume
            -with-report "logs/harm-report.html"
            -with-timeline "logs/harm-timeline.html"
            -with-trace "logs/harm-trace.txt"
        &&

        ## Step 5: Discover and collect outputs for Galaxy.
        ## Nextflow creates a nested output structure. We need to find the final files.
        HARMONIZED_FILE=$$(find. -name "*.merged") &&
        if; then
            mv "\$HARMONIZED_FILE" '$output_harmonized';
        else
            echo "Error: Harmonized output file not found." >&2;
            exit 1;
        fi &&
        
        ## Collect log files into the collection
        mkdir -p logs_collection &&
        mv logs/harm-report.html logs_collection/report.html &&
        mv logs/harm-timeline.html logs_collection/timeline.html &&
        mv logs/harm-trace.txt logs_collection/trace.txt
    ]]></command>
    <inputs>
        <param name="input_sumstats" type="data" format="tabular,tsv,csv" label="GWAS Summary Statistics File" help="Input file in a common format (e.g., Neale Lab, PLINK). May be gzipped."/>
        <param name="input_build" type="select" label="Input Genome Build">
            <option value="37" selected="true">GRCh37 / hg19</option>
            <option value="38">GRCh38 / hg38</option>
        </param>
        <param name="target_build" type="select" label="Target Genome Build (for harmonisation)">
            <option value="38" selected="true">GRCh38 / hg38</option>
            <option value="37">GRCh37 / hg19</option>
        </param>
        <param name="ref_dir" type="select" label="Reference Data">
            <options from_data_table="gwas_harmonizer_references">
                <filter type="sort_by" column="1"/>
                <validator type="no_options" message="No reference data found. Please contact your Galaxy administrator."/>
            </options>
        </param>
        <param name="threshold" type="float" value="0.99" min="0" max="1" label="Threshold for palindromic variants" help="Allele frequency threshold for imputing the strand orientation of palindromic variants."/>
    </inputs>
    <outputs>
        <data name="output_harmonized" format="tsv" label="${tool.name} on ${on_string}: Harmonized Data" />
        <collection name="output_logs" type="list" label="${tool.name} on ${on_string}: Logs and Reports">
            <discover_datasets directory="logs_collection" format="html" pattern="(?P<name>.*)\.html" />
            <discover_datasets directory="logs_collection" format="txt" pattern="(?P<name>.*)\.txt" />
        </collection>
    </outputs>
    <tests>
        <test expect_num_outputs="2">
            <param name="input_sumstats" value="input.tsv"/>
            <param name="input_build" value="37"/>
            <param name="target_build" value="38"/>
            <param name="ref_dir" value="test-data/mock_ref"/> <param name="threshold" value="0.99"/>
            <output name="output_harmonized">
                <assert_contents>
                    <has_text text="harmonized_variant_placeholder"/>
                </assert_contents>
            </output>
            <output_collection name="output_logs" type="list" count="3"/>
        </test>
    </tests>
    <help><!]></help>
    <expand macro="citations" />
</tool>